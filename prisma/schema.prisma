// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// On Every Prisma Schema Update run `pnpm generate` to generate the Prisma Client.
// Then "Restart TS Server" in VSCode for types to be available.

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @unique
  name        String
  description String?
  user_id     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  keys    ProjectKey[]
  domains Domain[]

  users User[] // user that has used this project

  auth_codes AuthCode[] // auth codes issued for this project
}

model ProjectKey {
  id            String   @id @default(uuid())
  name          String
  client_secret String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project_id String
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model Domain {
  id           String   @id @default(uuid())
  origin       String
  redirect_url String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Project    Project    @relation(fields: [project_id], references: [id])
  project_id String
  auth_codes AuthCode[] // auth codes issued from this domain to make sure redirect_uri is valid and compliant

  @@unique([project_id, origin])
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[] // this user's joined projects

  providers UserProvider[]

  user_profile        UserProfile @relation(fields: [user_profileuser_id], references: [user_id])
  user_profileuser_id String      @unique

  auth_codes AuthCode[] // auth codes issued to this user. needed to temporarily store user_id in auth code flow.
}

model UserProfile {
  user_id   String   @id @default(uuid())
  email     String?  @unique
  name      String?
  avatarUrl String?

  user User?
}

enum Provider {
  google
}

model UserProvider {
  id               String   @id @default(uuid())
  provider         Provider
  provider_user_id String // the id given by the provider
  expires_at       Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_user_id])
}

// OAuth

model AuthCode {
  id         String   @id @default(uuid())
  code       String   @unique
  // scope        String // No scope for now
  expires_at Int // epoch seconds
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  project_id String // the project that issued this auth code (to get client_id and then client_secret)
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  project_domain_id String // the domain used in the auth code request (to get redirect_uri)
  project_domain    Domain @relation(fields: [project_domain_id], references: [id], onDelete: Cascade)
}
